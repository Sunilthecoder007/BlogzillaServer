import React from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";

const validationSchema = Yup.object().shape({
  image: Yup.mixed().required("Please select an image file"),
  title: Yup.string().required("Please enter a title"),
  description: Yup.string().required("Please enter a description"),
  body: Yup.string().required("Please enter the article body"),
  category: Yup.string().required("Please select a category"),
});

const NewArticle = () => {
  const initialValues = {
    image: "",
    title: "",
    description: "",
    body: "",
    category: "",
  };

  const handleSubmit = (values) => {
    // Submit form data to backend API
    console.log(values);
  };

  return (
    <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <h2 className="text-lg font-bold mb-4">Add New Article</h2>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, isSubmitting, setFieldValue }) => (
          <Form>
            {/* Article image input */}
            <div className="mb-4">
              <label
                htmlFor="image"
                className="block text-gray-700 font-bold mb-2"
              >
                Article Image
              </label>
              <div className="flex items-center justify-center w-full">
                <label className="flex flex-col rounded-lg border-4 border-dashed w-full h-32 hover:bg-gray-100 hover:border-blue-500 group">
                  <div className="flex flex-col items-center justify-center pt-7">
                    <svg
                      className="w-10 h-10 text-gray-400 group-hover:text-blue-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 48 48"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M28 16l-8 8-8-8M16 22v8M32 22v8"
                      />
                    </svg>
                    <p className="lowercase text-sm text-gray-400 group-hover:text-blue-500 pt-1 tracking-wider">
                      Select a file
                    </p>
                  </div>
                  <input
                    type="file"
                    name="image"
                    onChange={(event) => {
                      setFieldValue("image", event.currentTarget.files[0]);
                    }}
                    onBlur={() => setFieldValue("image", values.image)}
                    className="hidden"
                  />
                </label>
              </div>
              <ErrorMessage
                name="image"
                className="text-red-500 text-sm mt-2"
              />
            </div>

            {/* Title input */}
            <div className="mb-4">
              <label
                htmlFor="title"
                className="block text-gray-700 font-bold mb-2"
              >
                Title
              </label>
              <Field
                type="text"
                name="title"
                className="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              />
              <ErrorMessage
                name="title"
                className="text-red-500 text-sm mt-2"
              />
            </div>

            {/* Description input */}
            <div className="mb-4">
              <label
                htmlFor="description"
                className="block text-gray-700 font-bold mb-2"
              >
                Description
              </label>
              <Field
                as="textarea"
                name="description"
                className="appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              />
              <ErrorMessage
                name="description"
                className="text-red-500 text-sm mt-2"
              />
            </div>

            <div className="mb-4">
              <label
                htmlFor="body"
                className="block text-gray-700 font-bold mb-2"
              >
                Body
              </label>
              <Field
                as="textarea"
                name="body"
                className="form-input w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:shadow-outline-blue focus:border-blue-500"
                rows="10"
              />
              <ErrorMessage name="body" className="text-red-500 text-sm mt-2" />
            </div>

            {/* Category select input */}
            <div className="mb-4">
              <label
                htmlFor="category"
                className="block text-gray-700 font-bold mb-2"
              >
                Category
              </label>
              <Field
                as="select"
                name="category"
                className="form-select block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              >
                <option value="">Select a category</option>
                <option value="technology">Technology</option>
                <option value="politics">Politics</option>
                <option value="sports">Sports</option>
              </Field>
              <ErrorMessage
                name="category"
                className="text-red-500 text-sm mt-2"
              />
            </div>

            {/* Submit button */}
            <div className="flex items-center justify-center">
              <button
                type="submit"
                disabled={isSubmitting}
                className="bg-white border border-gray-300 rounded-md shadow-sm py-2 px-4 text-sm font-medium text-blue-600 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                {isSubmitting ? "Submitting..." : "Submit"}
              </button>
            </div>
          </Form>
        )}
      </Formik>
    </div>
  );
};

export default NewArticle;
